version: '3.8'

services:
  aimos-core:
    build: .
    container_name: aimos-core
    ports:
      - "5000:5000"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - PROMPT_MEMORY_PORT=5000
    volumes:
      - ./data:/app/data
      - ./reports:/app/reports
      - ./logs:/app/logs
      - ./config:/app/config
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  aimos-dashboard:
    build: 
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: aimos-dashboard
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
    depends_on:
      - aimos-core
    restart: unless-stopped

  aimos-cli:
    build:
      context: ./cli
      dockerfile: Dockerfile
    container_name: aimos-cli
    volumes:
      - ./config:/app/config
    depends_on:
      - aimos-core
    restart: "no"
    profiles:
      - cli

  # Optional: Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: aimos-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    profiles:
      - with-redis

  # Optional: PostgreSQL for production database
  postgres:
    image: postgres:15-alpine
    container_name: aimos-postgres
    environment:
      POSTGRES_DB: aimos
      POSTGRES_USER: aimos
      POSTGRES_PASSWORD: aimos_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    profiles:
      - with-postgres

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: aimos-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    profiles:
      - monitoring

  # Optional: Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: aimos-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: aimos-network
